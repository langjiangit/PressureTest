package org.superl.pressure.core;/*    PressureTest    Created by superl[N.S.T] on 2018/6/13.                                                                      00000                                                                      00000                                                                      00000      00000000    00000  00000  00000000000     00000000    000000000 00000     00000000000  00000  00000  000000000000   00000000000  000000000 00000     00000  000   00000  00000  000000 00000  000000 00000  00000000  00000     000000000    00000  00000  00000   0000  0000000000000 000000    00000      0000000000  00000  00000  00000   00000 0000000000000 00000     00000         0000000  00000  00000  00000   00000 00000         00000     00000     00000  0000  000000000000  000000000000  000000000000  00000     00000     00000000000  000000000000  000000000000   00000000000  00000     00000      000000000   0000000000    00000000000     00000000    00000     00000                                00000                                00000                   Blog:www.superl.org                                00000                                           */import lombok.extern.log4j.Log4j;import org.superl.pressure.data.TestData;import org.superl.pressure.utils.MysqlDB1;import org.superl.pressure.utils.MysqlDB2;import org.superl.pressure.utils.MysqlDB3;import java.text.SimpleDateFormat;import java.util.Date;import java.util.concurrent.CountDownLatch;@Log4jpublic class MysqlThread extends Thread {    //每个线程插入的数据条数    private int insertCount = 100;    /**     * 数据库操作方案选择     * 单线程操作方案 0     * 多线程 共用一个数据库连接 1     * 多线程 每个线程独立创建一个数据库连接 2     * 多线程 每个线程每次插入数据都创建一个新的数据库连接，插入完成释放连接 3     */    private int method = 0;    //与数据表关联的类实例    private TestData insertData;    //用于判断线程执行是否完毕    private CountDownLatch threadsSignal;    public MysqlThread(int insertCount,TestData insertData,CountDownLatch threadsSignal,int method){        this.insertCount = insertCount;        this.threadsSignal = threadsSignal;        this.insertData = insertData;        this.method = method;    }    public MysqlThread(int insertCount,CountDownLatch threadsSignal,int method){        this.insertCount = insertCount;        this.threadsSignal = threadsSignal;        this.method = method;        Date date = new Date();        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");        String timestamp = sdf.format(date);        TestData testData = new TestData();        testData.setSymbol("XBTUSD");        testData.setClose(964.86);        testData.setHigh(964.86);        testData.setLow(964.86);        testData.setOpen(965);        testData.setTrades(10);        testData.setVolume(8000);        testData.setTimestamp(timestamp);        this.insertData = testData;    }    public void run() {        if( method == 0){            for( int i=1; i<=insertCount; i++){                MysqlDB1.insertTest(this.insertData);            }            log.debug("测试完成！");        }else if( method == 1){            for( int i=1; i<=insertCount; i++){                MysqlDB1.insertTest(this.insertData);            }        }else if( method == 2){            //多线程，每个线程一个数据库连接 并发插入性能测试            MysqlDB2 mysqlDB2 = new MysqlDB2();            mysqlDB2.getConnection();            for( int i=1; i<=insertCount; i++){                mysqlDB2.insertTest(this.insertData);            }        }else if( method == 3){            //多线程，每个线程在每次插入数据的时候都获取一个新的数据库连接，插入完成后释放连接            MysqlDB3 mysqlDB3 = new MysqlDB3();            for( int i=1; i<=insertCount; i++){                mysqlDB3.insertTest(this.insertData);            }        }        //线程结束时计数器减1        threadsSignal.countDown();    }}