package org.superl.pressure;/*    PressureTest    Created by superl[N.S.T] on 2018/6/13.                                                                      00000                                                                           00000                                                                           00000           00000000    00000  00000  00000000000     00000000    000000000 00000          00000000000  00000  00000  000000000000   00000000000  000000000 00000          00000  000   00000  00000  000000 00000  000000 00000  00000000  00000          000000000    00000  00000  00000   0000  0000000000000 000000    00000           0000000000  00000  00000  00000   00000 0000000000000 00000     00000              0000000  00000  00000  00000   00000 00000         00000     00000          00000  0000  000000000000  000000000000  000000000000  00000     00000          00000000000  000000000000  000000000000   00000000000  00000     00000           000000000   0000000000    00000000000     00000000    00000     00000                                     00000                                                                           00000                   Blog:www.superl.org                                00000                                           */import lombok.extern.log4j.Log4j;import org.superl.pressure.core.MysqlThread;import org.superl.pressure.core.Test;import java.util.concurrent.CountDownLatch;@Log4jpublic class MysqlTest extends Test{    public static void main(String[] args){        new MysqlTest().doTest();    }    public void doTest(){        //this.copyright();        this.threadNum = 700;        this.insertCount = 20;        this.method = 2;        //初始化countDown        CountDownLatch threadSignal = new CountDownLatch(threadNum);        if(method == 0){            log.debug("单线程 ,不断插入数据");            //如果是单线程，则插入数量改变为与多线程一致            MysqlThread thread = new MysqlThread(insertCount *threadNum,threadSignal,method);            thread.start();        }else{            if(method ==1){                log.debug("方案1：多线程, 每个线程都共用一个数据库连接进行插入数据");            }else if(method ==2){                log.debug("方案2：多线程，每个线程一个数据库连接 并发插入性能测试");            }            for (int i = 0; i < threadNum; i++) {                MysqlThread thread = new MysqlThread(insertCount,threadSignal,method);                thread.start();            }            try{                threadSignal.await(); //等待所有子线程执行完                log.info("执行完成！总线程数："+threadNum+" 每个线程插入条数："+insertCount+" 插入总条数："+String.valueOf(threadNum*insertCount));            }catch (InterruptedException e){                log.error(e.getMessage());            }        }    }}